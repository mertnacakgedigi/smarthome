"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.commandToRegExp = exports.concatTranscripts = exports.debounce = void 0;

var debounce = function debounce(func, wait, immediate) {
  var timeout;
  return function () {
    var context = this;
    var args = arguments;

    var later = function later() {
      timeout = null;
      if (!immediate) func.apply(context, args);
    };

    var callNow = immediate && !timeout;
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
    if (callNow) func.apply(context, args);
  };
};

exports.debounce = debounce;

var concatTranscripts = function concatTranscripts() {
  for (var _len = arguments.length, transcriptParts = new Array(_len), _key = 0; _key < _len; _key++) {
    transcriptParts[_key] = arguments[_key];
  }

  return transcriptParts.map(function (t) {
    return t.trim();
  }).join(' ').trim();
}; // The command matching code is a modified version of Backbone.Router by Jeremy Ashkenas, under the MIT license.


exports.concatTranscripts = concatTranscripts;
var optionalParam = /\s*\((.*?)\)\s*/g;
var optionalRegex = /(\(\?:[^)]+\))\?/g;
var namedParam = /(\(\?)?:\w+/g;
var splatParam = /\*/g;
var escapeRegExp = /[-{}[\]+?.,\\^$|#]/g;

var commandToRegExp = function commandToRegExp(command) {
  if (command instanceof RegExp) {
    return new RegExp(command.source, 'i');
  }

  command = command.replace(escapeRegExp, '\\$&').replace(optionalParam, '(?:$1)?').replace(namedParam, function (match, optional) {
    return optional ? match : '([^\\s]+)';
  }).replace(splatParam, '(.*?)').replace(optionalRegex, '\\s*$1?\\s*');
  return new RegExp('^' + command + '$', 'i');
};

exports.commandToRegExp = commandToRegExp;