{"ast":null,"code":"var _jsxFileName = \"/Users/mertnacakgedigi/Desktop/smarthome/src/container/MyHome.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Memoized as Light } from '../components/Lights/Light';\nimport Thermostat from '../components/Thermostat/Thermostat';\nimport Speech from '../components/Command/SpeechRecognition';\nimport CommandList from '../components/Command/CommandList';\nimport Logs from '../components/Logs/Logs';\nimport HomeModel from '../api/index';\nimport Input from '../util/Input';\nimport LastLog from '../components/Logs/LastLog';\nimport LightHeader from '../components/Lights/LightHeader';\nimport { useSpeechRecognition } from 'react-speech-recognition';\nexport default function MyHome() {\n  const [lights, setLights] = useState();\n  const [value, setTempature] = useState(82);\n  const [logs, setLogs] = useState();\n  const {\n    transcript\n  } = useSpeechRecognition(\"\");\n  const [input, setInput] = useState(\"\"); //Fetch Home\n\n  useEffect(() => {\n    getMyHome();\n  }, []);\n\n  async function getMyHome() {\n    try {\n      const res = await HomeModel.fetchHome();\n      const {\n        lights,\n        value,\n        logs\n      } = res.data;\n      setLights(lights);\n      setTempature(value);\n      setLogs(logs);\n    } catch (err) {\n      console.log(err);\n    }\n  } //Ligth functions\n\n\n  function addLight() {\n    HomeModel.addLight().then(res => {\n      setLogs([...logs, \"A new light added\"]);\n      setLights([...lights, {\n        isOn: false\n      }]);\n    }).catch(err => console.log(err));\n  }\n\n  function removeLastLight() {\n    HomeModel.deleteLastLigth().then(res => {\n      const temp = [...lights];\n      temp.pop();\n      setLights(temp);\n      setLogs([...logs, \"Last light deleted\"]);\n    }).catch(err => console.log(err));\n  }\n\n  function deleteLight(id) {\n    HomeModel.removeLight(id).then(res => {\n      const temp = [...lights];\n      temp.splice(id, 1);\n      setLights(temp);\n      let suffix = Input.ordinal_suffix_of(id + 1);\n      setLogs([...logs, `The ${suffix} light deleted`]);\n    }).catch(err => console.log(err));\n  }\n\n  function toggleLight(id) {\n    HomeModel.toggleLight(id).then(res => {\n      const temp = [...lights];\n      temp[id].isOn = !temp[id].isOn;\n      setLights(temp);\n      let suffix = Input.ordinal_suffix_of(id + 1);\n      if (!temp[id].isOn) return setLogs([...logs, `The ${suffix} light turned off`]);\n      setLogs([...logs, `The ${suffix} light turned on`]);\n    }).catch(err => console.log(err));\n  } // Transcript\n\n\n  useEffect(() => {\n    transcriptCheck(transcript); // eslint-disable-next-line\n  }, [transcript]);\n\n  function transcriptCheck(value) {\n    // If text command or voice command empty return\n    if (value === \"\" || value === undefined) return; // Get words of commands and make digits for string values\n\n    let [first, fifth, twowords, threewords, fourwords, index, indexForDelete] = Input.split_of(value);\n    if (fourwords === \"add a new light\" || threewords === \"add a light\") addLight();\n    if (fourwords === \"delete the last light\" || fourwords === \"remove the last light\") removeLastLight();\n\n    if (threewords === \"set the temperature\" && fifth >= 50 && fifth <= 100) {\n      sendTempatureToServer(\"\", fifth);\n      handleChangeforTempature(\"\", fifth);\n    } // If there is no digit from the input return\n\n\n    if (index === -1 && indexForDelete === -1) return;\n    if (first === \"delete\" || first === \"remove\") deleteLight(indexForDelete);\n    if (twowords === \"turn on\" && lights[index].isOn === false) toggleLight(index);\n    if (twowords === \"turn off\" && lights[index].isOn === true) toggleLight(index);\n  } //  Text Command\n\n\n  useEffect(() => {\n    transcriptCheck(input); // eslint-disable-next-line\n  }, [input]);\n\n  function onChange(event) {\n    setInput(event.target.value);\n  } // Thermostat\n\n\n  function handleChangeforTempature(event, newValue) {\n    setTempature(newValue);\n  }\n\n  ;\n\n  function sendTempatureToServer(event, value) {\n    HomeModel.setTempature({\n      value\n    }).then(res => {\n      setLogs([...logs, `Set the thermostat to ${value}Â°F`]);\n    }).catch(err => console.log(err));\n  }\n\n  ;\n  let lightList;\n\n  if (lights) {\n    lightList = lights.map((element, idx) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: idx,\n        className: \"light\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 20\n        }\n      }, /*#__PURE__*/React.createElement(Light, {\n        toggleLight: toggleLight,\n        deleteLight: deleteLight,\n        id: idx,\n        checkOn: lights[idx] ? lights[idx].isOn : true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 53\n        }\n      }));\n    });\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 22\n    }\n  }, /*#__PURE__*/React.createElement(LightHeader, {\n    addLight: addLight,\n    removeLastLight: removeLastLight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"light-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 25\n    }\n  }, lightList)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Thermostat, {\n    key: \"thermo\",\n    handleSubmit: sendTempatureToServer,\n    handleChange: handleChangeforTempature,\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Speech, {\n    transcript: transcript,\n    transcriptCheck: transcriptCheck,\n    key: \"speech\",\n    toggleLight: toggleLight,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 25\n    }\n  }, \" Your Text Command : \", /*#__PURE__*/React.createElement(\"input\", {\n    value: input,\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 49\n    }\n  })), /*#__PURE__*/React.createElement(CommandList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Logs, {\n    logsAll: logs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(LastLog, {\n    logs: logs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 17\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/mertnacakgedigi/Desktop/smarthome/src/container/MyHome.js"],"names":["React","useEffect","useState","Memoized","Light","Thermostat","Speech","CommandList","Logs","HomeModel","Input","LastLog","LightHeader","useSpeechRecognition","MyHome","lights","setLights","value","setTempature","logs","setLogs","transcript","input","setInput","getMyHome","res","fetchHome","data","err","console","log","addLight","then","isOn","catch","removeLastLight","deleteLastLigth","temp","pop","deleteLight","id","removeLight","splice","suffix","ordinal_suffix_of","toggleLight","transcriptCheck","undefined","first","fifth","twowords","threewords","fourwords","index","indexForDelete","split_of","sendTempatureToServer","handleChangeforTempature","onChange","event","target","newValue","lightList","map","element","idx"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {Memoized as Light} from '../components/Lights/Light'\nimport Thermostat from '../components/Thermostat/Thermostat'\nimport Speech from '../components/Command/SpeechRecognition'\nimport CommandList from '../components/Command/CommandList'\nimport Logs from '../components/Logs/Logs'\nimport HomeModel from '../api/index'\nimport Input from '../util/Input'\nimport LastLog from '../components/Logs/LastLog'\nimport LightHeader from '../components/Lights/LightHeader'\nimport { useSpeechRecognition } from 'react-speech-recognition'\n\n\n\nexport default function MyHome () {\n    const [lights, setLights] = useState();\n    const [value, setTempature] = useState(82)\n    const [logs,setLogs] =useState()\n    const {transcript } = useSpeechRecognition(\"\")\n    const [input,setInput]=useState(\"\")\n \n    //Fetch Home\n    useEffect(() => {   \n        getMyHome()\n    },[])\n\n    async function getMyHome () {\n        try {                  \n            const res = await HomeModel.fetchHome(); \n            const {lights , value, logs} = res.data; \n            setLights(lights);\n            setTempature(value);\n            setLogs(logs)\n        }\n        catch(err){\n            console.log(err)\n        }\n    }\n\n    //Ligth functions\n    function addLight ()  { \n        HomeModel.addLight()\n            .then(res => { \n                setLogs([...logs,\"A new light added\"])\n                setLights([...lights,{isOn:false}])\n            })\n            .catch(err => console.log(err))\n    }\n\n    function removeLastLight () {\n        HomeModel.deleteLastLigth()\n            .then(res =>  {\n                const temp = [...lights]\n                temp.pop()\n                setLights(temp)     \n                setLogs([...logs,\"Last light deleted\"])\n            })\n            .catch(err => console.log(err))\n    }\n\n    function deleteLight (id) {   \n        HomeModel.removeLight(id)\n            .then(res => {\n                const temp = [...lights];\n                temp.splice(id,1);\n                setLights(temp);\n                let suffix = Input.ordinal_suffix_of(id+1)\n                setLogs([...logs,`The ${suffix} light deleted`])\n            })\n            .catch(err => console.log(err))\n    }\n\n    function toggleLight (id) {\n        HomeModel.toggleLight(id)\n            .then(res => {\n                const temp = [...lights]\n                temp[id].isOn = !temp[id].isOn\n                setLights(temp)\n                let suffix = Input.ordinal_suffix_of(id+1)\n                if (!temp[id].isOn) return setLogs([...logs,`The ${suffix} light turned off`])\n                setLogs([...logs,`The ${suffix} light turned on`])\n            })\n            .catch(err => console.log(err) )\n    }\n\n\n    // Transcript\n    useEffect(()=>{\n        transcriptCheck(transcript)\n        // eslint-disable-next-line\n    },[transcript])\n\n    function transcriptCheck(value)  {\n        // If text command or voice command empty return\n        if(value === \"\" || value ===undefined) return\n        // Get words of commands and make digits for string values\n        let [first,fifth,twowords,threewords,fourwords,index,indexForDelete] = Input.split_of(value)\n\n        if(fourwords ===\"add a new light\" || threewords === \"add a light\" ) addLight()\n        if(fourwords ===\"delete the last light\" || fourwords === \"remove the last light\") removeLastLight()\n        if(threewords ===\"set the temperature\" && fifth >= 50 && fifth <= 100 )  {sendTempatureToServer(\"\",fifth); handleChangeforTempature(\"\",fifth)}\n\n        // If there is no digit from the input return\n        if (index === -1 && indexForDelete === -1) return \n        if(first ===\"delete\" || first === \"remove\" ) deleteLight(indexForDelete)\n        if(twowords ===\"turn on\" && lights[index].isOn === false ) toggleLight(index)\n        if(twowords ===\"turn off\" && lights[index].isOn === true ) toggleLight(index)\n    }\n\n    //  Text Command\n    useEffect(()=>{\n        transcriptCheck(input)\n        // eslint-disable-next-line\n    },[input])\n\n    function onChange(event) {\n        setInput(event.target.value)\n    }\n\n    // Thermostat\n    function handleChangeforTempature (event, newValue)  {\n        setTempature(newValue)\n    };\n\n\n    function sendTempatureToServer (event, value) { \n        HomeModel.setTempature({value})\n            .then (res => {\n                setLogs([...logs,`Set the thermostat to ${value}Â°F`])\n            })\n            .catch(err => console.log(err))\n    };\n\n    let lightList;\n\n    if (lights) {\n        lightList = lights.map((element,idx) => {\n            return <div key={idx} className=\"light\"><Light toggleLight = {toggleLight} deleteLight ={deleteLight} id={idx}  checkOn={lights[idx] ? lights[idx].isOn : true} /></div>\n        })\n    }; \n        return (\n            <div> \n                <div className = \"row\">\n                     <div className=\"left\">           \n                        <LightHeader addLight={addLight} removeLastLight={removeLastLight}/>\n                        <div className=\"light-container\">\n                            {lightList}\n                        </div>\n                    </div>      \n                    <div className=\"right\">           \n                        <Thermostat key =\"thermo\"\n                            handleSubmit = {sendTempatureToServer} \n                            handleChange = {handleChangeforTempature} \n                            value = {value}\n                        /> \n                        <Speech \n                            transcript ={transcript} \n                            transcriptCheck = {transcriptCheck}\n                            key =\"speech\" \n                            toggleLight = {toggleLight}\n                        />\n                        <p> Your Text Command : <input value={input} onChange={onChange}></input></p>\n                        <CommandList/>\n                        <Logs  logsAll ={logs} />  \n                    </div>\n                </div>\n                <LastLog   logs= {logs} />  \n            </div>                   \n        )   \n}\n"]},"metadata":{},"sourceType":"module"}